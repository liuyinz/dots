#!/bin/bash

# This script starts emacs.app if it is not running, opens whatever file
# you pass in and changes the focus to emacs.  Without any arguments, it just
# opens the current buffer or *scratch* if nothing else is open.  The following
# example will open ~/.bashrc

# ec ~/.bashrc

# You can also pass it multipe files, it will open them all.  Unbury-buffer
# will cycle through those files in order

# The compliment to the script is et, which opens emacs in the terminal
# attached to a daemon

# If you want to execute elisp, pass in -e whatever.
# You may also want to stop the output from returning to the terminal, like
# ec -e "(message \"Hello\")" > /dev/null

# emacsclient options for reference
# -a "" starts emacs daemon and reattaches
# -c creates a new frame
# -n returns control back to the terminal
# -e eval the script

# change_focus() {
# 	emacsclient -n -e "(select-frame-set-input-focus (selected-frame))" >/dev/null
# }

app_running_p() {
	# return 1 if succeed,otherwise 0
	ps aux | grep -v grep | grep -c "Emacs.app/Contents/MacOS/Emacs"

	# pgrep -f "Emacs.app/Contents/MacOS/Emacs"
}

if [[ $(app_running_p) -eq 0 ]]; then
	eval "/Applications/Emacs.app/Contents/MacOS/Emacs" &>/dev/null &
	disown && sleep 5
fi

if [[ $# -eq 0 ]]; then
	emacsclient -n -e "(select-frame-set-input-focus (selected-frame))" >/dev/null
	# change_focus
else
	emacsclient -n "$@"
fi

# [[ $# -eq 0 ]] && change_focus || emacsclient -n "$@"

# # start a server if not running and maxmize the hide window if exists
# [[ $(visible_frames) -eq 0 ]] && change_focus
